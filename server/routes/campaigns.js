import express from 'express';
import db from '../server.js';

const router = express.Router();

// Simplified middleware that skips authentication
const skipAuth = (req, res, next) => {
  next();
};

// Get all campaigns
router.get('/', skipAuth, (req, res) => {
  db.all('SELECT * FROM campaigns ORDER BY created_at DESC', [], (err, campaigns) => {
    if (err) return res.status(500).json({ message: err.message });
    res.json(campaigns);
  });
});

// Get a single campaign
router.get('/:id', skipAuth, (req, res) => {
  db.get('SELECT * FROM campaigns WHERE id = ?', [req.params.id], (err, campaign) => {
    if (err) return res.status(500).json({ message: err.message });
    if (!campaign) return res.status(404).json({ message: 'Campaign not found' });
    res.json(campaign);
  });
});

// Create a campaign
router.post('/', skipAuth, (req, res) => {
  const { title, description, target_audience, goals } = req.body;
  
  db.run(
    `INSERT INTO campaigns (title, description, target_audience, goals, status) 
     VALUES (?, ?, ?, ?, ?)`,
    [title, description, target_audience, goals, 'draft'],
    function(err) {
      if (err) return res.status(500).json({ message: err.message });
      
      db.get('SELECT * FROM campaigns WHERE id = ?', [this.lastID], (err, campaign) => {
        if (err) return res.status(500).json({ message: err.message });
        res.status(201).json(campaign);
      });
    }
  );
});

// Update a campaign
router.put('/:id', skipAuth, (req, res) => {
  const campaignId = req.params.id;
  
  // First check if the campaign exists
  db.get('SELECT * FROM campaigns WHERE id = ?', [campaignId], (err, campaign) => {
    if (err) return res.status(500).json({ message: err.message });
    if (!campaign) return res.status(404).json({ message: 'Campaign not found' });
    
    // Update the campaign
    const { title, description, status, startDate, endDate, autoGenerated } = req.body;
    const sql = `
      UPDATE campaigns
      SET title = ?, description = ?, status = ?, 
          start_date = ?, end_date = ?, auto_generated = ?
      WHERE id = ?
    `;
    
    db.run(
      sql, 
      [
        title || campaign.title, 
        description !== undefined ? description : campaign.description, 
        status || campaign.status,
        startDate || campaign.start_date,
        endDate || campaign.end_date,
        autoGenerated !== undefined ? (autoGenerated ? 1 : 0) : campaign.auto_generated,
        campaignId
      ], 
      function(err) {
        if (err) return res.status(500).json({ message: err.message });
        
        // Get the updated campaign
        db.get('SELECT * FROM campaigns WHERE id = ?', [campaignId], (err, updatedCampaign) => {
          if (err) return res.status(500).json({ message: err.message });
          
          res.json(updatedCampaign);
        });
      }
    );
  });
});

// Delete a campaign
router.delete('/:id', skipAuth, (req, res) => {
  db.run('DELETE FROM campaigns WHERE id = ?', [req.params.id], function(err) {
    if (err) return res.status(500).json({ message: err.message });
    if (this.changes === 0) return res.status(404).json({ message: 'Campaign not found' });
    res.json({ message: 'Campaign deleted' });
  });
});

// Start a campaign
router.post('/:id/start', skipAuth, (req, res) => {
  const campaignId = req.params.id;
  
  db.get('SELECT * FROM campaigns WHERE id = ?', [campaignId], (err, campaign) => {
    if (err) return res.status(500).json({ message: err.message });
    if (!campaign) return res.status(404).json({ message: 'Campaign not found' });
    
    db.run(
      'UPDATE campaigns SET status = ?, start_date = ? WHERE id = ?', 
      ['active', new Date().toISOString(), campaignId], 
      function(err) {
        if (err) return res.status(500).json({ message: err.message });
        
        // Log the action
        db.run(
          'INSERT INTO agent_logs (campaign_id, action_type, result) VALUES (?, ?, ?)',
          [campaignId, 'campaign_start', 'Campaign started successfully'],
          function(err) {
            if (err) console.error('Error logging campaign start:', err.message);
            
            db.get('SELECT * FROM campaigns WHERE id = ?', [campaignId], (err, updatedCampaign) => {
              if (err) return res.status(500).json({ message: err.message });
              res.json(updatedCampaign);
            });
          }
        );
      }
    );
  });
});

// Pause a campaign
router.post('/:id/pause', skipAuth, (req, res) => {
  const campaignId = req.params.id;
  
  // First check if the campaign exists
  db.get('SELECT * FROM campaigns WHERE id = ?', [campaignId], (err, campaign) => {
    if (err) return res.status(500).json({ message: err.message });
    if (!campaign) return res.status(404).json({ message: 'Campaign not found' });
    
    // Update the campaign status to paused
    db.run(
      'UPDATE campaigns SET status = ? WHERE id = ?', 
      ['paused', campaignId], 
      function(err) {
        if (err) return res.status(500).json({ message: err.message });
        
        // Log the action
        db.run(
          'INSERT INTO agent_logs (campaign_id, action_type, result) VALUES (?, ?, ?)',
          [campaignId, 'campaign_pause', 'Campaign paused successfully'],
          function(err) {
            if (err) console.error('Error logging campaign pause:', err.message);
            
            db.get('SELECT * FROM campaigns WHERE id = ?', [campaignId], (err, updatedCampaign) => {
              if (err) return res.status(500).json({ message: err.message });
              res.json(updatedCampaign);
            });
          }
        );
      }
    );
  });
});

export default router; 